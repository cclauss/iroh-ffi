// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.iroh;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_iroh_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_iroh_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_iroh"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "iroh")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                FfiConverterTypeSubscribeCallback.register(lib)
                }
        }
    }

    fun uniffi_iroh_fn_free_irohnode(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_constructor_irohnode_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_irohnode_peer_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_method_irohnode_create_doc(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_irohnode_import_doc(`ptr`: Pointer,`ticket`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_irohnode_create_author(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_irohnode_stats(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_free_doc(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_method_doc_id(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_method_doc_share_write(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_doc_share_read(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_doc_set_bytes(`ptr`: Pointer,`author`: Pointer,`key`: RustBuffer.ByValue,`value`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_doc_get_content_bytes(`ptr`: Pointer,`hash`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_method_doc_latest(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_method_doc_subscribe(`ptr`: Pointer,`cb`: Long,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_method_doc_stop_sync(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_method_doc_status(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_free_authorid(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_method_authorid_to_string(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_free_entry(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_method_entry_author(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_entry_key(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_method_entry_hash(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_free_hash(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_method_hash_to_string(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_method_hash_to_bytes(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_free_docticket(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_constructor_docticket_from_string(`content`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_iroh_fn_method_docticket_to_string(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_fn_init_callback_subscribecallback(`callbackStub`: ForeignCallback,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_iroh_fn_func_set_log_level(`level`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_iroh_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_iroh_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_iroh_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_iroh_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_iroh_checksum_func_set_log_level(
    ): Short
    fun uniffi_iroh_checksum_method_irohnode_peer_id(
    ): Short
    fun uniffi_iroh_checksum_method_irohnode_create_doc(
    ): Short
    fun uniffi_iroh_checksum_method_irohnode_import_doc(
    ): Short
    fun uniffi_iroh_checksum_method_irohnode_create_author(
    ): Short
    fun uniffi_iroh_checksum_method_irohnode_stats(
    ): Short
    fun uniffi_iroh_checksum_method_doc_id(
    ): Short
    fun uniffi_iroh_checksum_method_doc_share_write(
    ): Short
    fun uniffi_iroh_checksum_method_doc_share_read(
    ): Short
    fun uniffi_iroh_checksum_method_doc_set_bytes(
    ): Short
    fun uniffi_iroh_checksum_method_doc_get_content_bytes(
    ): Short
    fun uniffi_iroh_checksum_method_doc_latest(
    ): Short
    fun uniffi_iroh_checksum_method_doc_subscribe(
    ): Short
    fun uniffi_iroh_checksum_method_doc_stop_sync(
    ): Short
    fun uniffi_iroh_checksum_method_doc_status(
    ): Short
    fun uniffi_iroh_checksum_method_authorid_to_string(
    ): Short
    fun uniffi_iroh_checksum_method_entry_author(
    ): Short
    fun uniffi_iroh_checksum_method_entry_key(
    ): Short
    fun uniffi_iroh_checksum_method_entry_hash(
    ): Short
    fun uniffi_iroh_checksum_method_hash_to_string(
    ): Short
    fun uniffi_iroh_checksum_method_hash_to_bytes(
    ): Short
    fun uniffi_iroh_checksum_method_docticket_to_string(
    ): Short
    fun uniffi_iroh_checksum_constructor_irohnode_new(
    ): Short
    fun uniffi_iroh_checksum_constructor_docticket_from_string(
    ): Short
    fun ffi_iroh_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_iroh_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_iroh_checksum_func_set_log_level() != 20910.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_irohnode_peer_id() != 46487.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_irohnode_create_doc() != 22030.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_irohnode_import_doc() != 37728.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_irohnode_create_author() != 12072.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_irohnode_stats() != 12801.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_id() != 34918.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_share_write() != 64425.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_share_read() != 8947.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_set_bytes() != 50064.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_get_content_bytes() != 4262.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_latest() != 34983.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_subscribe() != 17522.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_stop_sync() != 10292.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_doc_status() != 11839.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_authorid_to_string() != 61926.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_entry_author() != 7235.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_entry_key() != 56754.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_entry_hash() != 38165.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_hash_to_string() != 33037.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_hash_to_bytes() != 55740.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_method_docticket_to_string() != 32683.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_constructor_irohnode_new() != 18953.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_iroh_checksum_constructor_docticket_from_string() != 12688.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.


public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): Int {
        return 4 + value.size
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface AuthorIdInterface {
    
    fun `toString`(): String
}

class AuthorId(
    pointer: Pointer
) : FFIObject(pointer), AuthorIdInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_iroh_fn_free_authorid(this.pointer, status)
        }
    }

    override fun `toString`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_authorid_to_string(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeAuthorId: FfiConverter<AuthorId, Pointer> {
    override fun lower(value: AuthorId): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): AuthorId {
        return AuthorId(value)
    }

    override fun read(buf: ByteBuffer): AuthorId {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AuthorId) = 8

    override fun write(value: AuthorId, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface DocInterface {
    
    fun `id`(): String@Throws(IrohException::class)
    fun `shareWrite`(): DocTicket@Throws(IrohException::class)
    fun `shareRead`(): DocTicket@Throws(IrohException::class)
    fun `setBytes`(`author`: AuthorId, `key`: ByteArray, `value`: ByteArray): Hash@Throws(IrohException::class)
    fun `getContentBytes`(`hash`: Hash): ByteArray@Throws(IrohException::class)
    fun `latest`(): List<Entry>@Throws(IrohException::class)
    fun `subscribe`(`cb`: SubscribeCallback)@Throws(IrohException::class)
    fun `stopSync`()@Throws(IrohException::class)
    fun `status`(): LiveStatus
}

class Doc(
    pointer: Pointer
) : FFIObject(pointer), DocInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_iroh_fn_free_doc(this.pointer, status)
        }
    }

    override fun `id`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_id(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `shareWrite`(): DocTicket =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_share_write(it,
        
        _status)
}
        }.let {
            FfiConverterTypeDocTicket.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `shareRead`(): DocTicket =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_share_read(it,
        
        _status)
}
        }.let {
            FfiConverterTypeDocTicket.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `setBytes`(`author`: AuthorId, `key`: ByteArray, `value`: ByteArray): Hash =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_set_bytes(it,
        FfiConverterTypeAuthorId.lower(`author`),FfiConverterByteArray.lower(`key`),FfiConverterByteArray.lower(`value`),
        _status)
}
        }.let {
            FfiConverterTypeHash.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `getContentBytes`(`hash`: Hash): ByteArray =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_get_content_bytes(it,
        FfiConverterTypeHash.lower(`hash`),
        _status)
}
        }.let {
            FfiConverterByteArray.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `latest`(): List<Entry> =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_latest(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeEntry.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `subscribe`(`cb`: SubscribeCallback) =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_subscribe(it,
        FfiConverterTypeSubscribeCallback.lower(`cb`),
        _status)
}
        }
    
    
    
    @Throws(IrohException::class)override fun `stopSync`() =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_stop_sync(it,
        
        _status)
}
        }
    
    
    
    @Throws(IrohException::class)override fun `status`(): LiveStatus =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_doc_status(it,
        
        _status)
}
        }.let {
            FfiConverterTypeLiveStatus.lift(it)
        }
    
    

    
}

public object FfiConverterTypeDoc: FfiConverter<Doc, Pointer> {
    override fun lower(value: Doc): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Doc {
        return Doc(value)
    }

    override fun read(buf: ByteBuffer): Doc {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Doc) = 8

    override fun write(value: Doc, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface DocTicketInterface {
    
    fun `toString`(): String
}

class DocTicket(
    pointer: Pointer
) : FFIObject(pointer), DocTicketInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_iroh_fn_free_docticket(this.pointer, status)
        }
    }

    override fun `toString`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_docticket_to_string(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    companion object {
        fun `fromString`(`content`: String): DocTicket =
            DocTicket(
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_constructor_docticket_from_string(FfiConverterString.lower(`content`),_status)
})
        
    }
    
}

public object FfiConverterTypeDocTicket: FfiConverter<DocTicket, Pointer> {
    override fun lower(value: DocTicket): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): DocTicket {
        return DocTicket(value)
    }

    override fun read(buf: ByteBuffer): DocTicket {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: DocTicket) = 8

    override fun write(value: DocTicket, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface EntryInterface {
    
    fun `author`(): AuthorId
    fun `key`(): ByteArray
    fun `hash`(): Hash
}

class Entry(
    pointer: Pointer
) : FFIObject(pointer), EntryInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_iroh_fn_free_entry(this.pointer, status)
        }
    }

    override fun `author`(): AuthorId =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_entry_author(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAuthorId.lift(it)
        }
    
    override fun `key`(): ByteArray =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_entry_key(it,
        
        _status)
}
        }.let {
            FfiConverterByteArray.lift(it)
        }
    
    override fun `hash`(): Hash =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_entry_hash(it,
        
        _status)
}
        }.let {
            FfiConverterTypeHash.lift(it)
        }
    
    

    
}

public object FfiConverterTypeEntry: FfiConverter<Entry, Pointer> {
    override fun lower(value: Entry): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Entry {
        return Entry(value)
    }

    override fun read(buf: ByteBuffer): Entry {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Entry) = 8

    override fun write(value: Entry, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface HashInterface {
    
    fun `toString`(): String
    fun `toBytes`(): ByteArray
}

class Hash(
    pointer: Pointer
) : FFIObject(pointer), HashInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_iroh_fn_free_hash(this.pointer, status)
        }
    }

    override fun `toString`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_hash_to_string(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `toBytes`(): ByteArray =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_hash_to_bytes(it,
        
        _status)
}
        }.let {
            FfiConverterByteArray.lift(it)
        }
    
    

    
}

public object FfiConverterTypeHash: FfiConverter<Hash, Pointer> {
    override fun lower(value: Hash): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Hash {
        return Hash(value)
    }

    override fun read(buf: ByteBuffer): Hash {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Hash) = 8

    override fun write(value: Hash, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface IrohNodeInterface {
    
    fun `peerId`(): String@Throws(IrohException::class)
    fun `createDoc`(): Doc@Throws(IrohException::class)
    fun `importDoc`(`ticket`: DocTicket): Doc@Throws(IrohException::class)
    fun `createAuthor`(): AuthorId@Throws(IrohException::class)
    fun `stats`(): Map<String, CounterStats>
}

class IrohNode(
    pointer: Pointer
) : FFIObject(pointer), IrohNodeInterface {
    constructor() :
        this(
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_constructor_irohnode_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_iroh_fn_free_irohnode(this.pointer, status)
        }
    }

    override fun `peerId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_irohnode_peer_id(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `createDoc`(): Doc =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_irohnode_create_doc(it,
        
        _status)
}
        }.let {
            FfiConverterTypeDoc.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `importDoc`(`ticket`: DocTicket): Doc =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_irohnode_import_doc(it,
        FfiConverterTypeDocTicket.lower(`ticket`),
        _status)
}
        }.let {
            FfiConverterTypeDoc.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `createAuthor`(): AuthorId =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_irohnode_create_author(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAuthorId.lift(it)
        }
    
    
    @Throws(IrohException::class)override fun `stats`(): Map<String, CounterStats> =
        callWithPointer {
    rustCallWithError(IrohException) { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_method_irohnode_stats(it,
        
        _status)
}
        }.let {
            FfiConverterMapStringTypeCounterStats.lift(it)
        }
    
    

    
}

public object FfiConverterTypeIrohNode: FfiConverter<IrohNode, Pointer> {
    override fun lower(value: IrohNode): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): IrohNode {
        return IrohNode(value)
    }

    override fun read(buf: ByteBuffer): IrohNode {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: IrohNode) = 8

    override fun write(value: IrohNode, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class CounterStats (
    var `value`: ULong, 
    var `description`: String
) {
    
}

public object FfiConverterTypeCounterStats: FfiConverterRustBuffer<CounterStats> {
    override fun read(buf: ByteBuffer): CounterStats {
        return CounterStats(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: CounterStats) = (
            FfiConverterULong.allocationSize(value.`value`) +
            FfiConverterString.allocationSize(value.`description`)
    )

    override fun write(value: CounterStats, buf: ByteBuffer) {
            FfiConverterULong.write(value.`value`, buf)
            FfiConverterString.write(value.`description`, buf)
    }
}




data class LiveStatus (
    var `active`: Boolean, 
    var `subscriptions`: ULong
) {
    
}

public object FfiConverterTypeLiveStatus: FfiConverterRustBuffer<LiveStatus> {
    override fun read(buf: ByteBuffer): LiveStatus {
        return LiveStatus(
            FfiConverterBoolean.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: LiveStatus) = (
            FfiConverterBoolean.allocationSize(value.`active`) +
            FfiConverterULong.allocationSize(value.`subscriptions`)
    )

    override fun write(value: LiveStatus, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`active`, buf)
            FfiConverterULong.write(value.`subscriptions`, buf)
    }
}





sealed class IrohException: Exception() {
    // Each variant is a nested class
    
    class Runtime(
        val `description`: String
        ) : IrohException() {
        override val message
            get() = "description=${ `description` }"
    }
    
    class NodeCreate(
        val `description`: String
        ) : IrohException() {
        override val message
            get() = "description=${ `description` }"
    }
    
    class Doc(
        val `description`: String
        ) : IrohException() {
        override val message
            get() = "description=${ `description` }"
    }
    
    class Author(
        val `description`: String
        ) : IrohException() {
        override val message
            get() = "description=${ `description` }"
    }
    
    class DocTicket(
        val `description`: String
        ) : IrohException() {
        override val message
            get() = "description=${ `description` }"
    }
    
    class Uniffi(
        val `description`: String
        ) : IrohException() {
        override val message
            get() = "description=${ `description` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<IrohException> {
        override fun lift(error_buf: RustBuffer.ByValue): IrohException = FfiConverterTypeIrohError.lift(error_buf)
    }

    
}

public object FfiConverterTypeIrohError : FfiConverterRustBuffer<IrohException> {
    override fun read(buf: ByteBuffer): IrohException {
        

        return when(buf.getInt()) {
            1 -> IrohException.Runtime(
                FfiConverterString.read(buf),
                )
            2 -> IrohException.NodeCreate(
                FfiConverterString.read(buf),
                )
            3 -> IrohException.Doc(
                FfiConverterString.read(buf),
                )
            4 -> IrohException.Author(
                FfiConverterString.read(buf),
                )
            5 -> IrohException.DocTicket(
                FfiConverterString.read(buf),
                )
            6 -> IrohException.Uniffi(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: IrohException): Int {
        return when(value) {
            is IrohException.Runtime -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`description`)
            )
            is IrohException.NodeCreate -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`description`)
            )
            is IrohException.Doc -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`description`)
            )
            is IrohException.Author -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`description`)
            )
            is IrohException.DocTicket -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`description`)
            )
            is IrohException.Uniffi -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`description`)
            )
        }
    }

    override fun write(value: IrohException, buf: ByteBuffer) {
        when(value) {
            is IrohException.Runtime -> {
                buf.putInt(1)
                FfiConverterString.write(value.`description`, buf)
                Unit
            }
            is IrohException.NodeCreate -> {
                buf.putInt(2)
                FfiConverterString.write(value.`description`, buf)
                Unit
            }
            is IrohException.Doc -> {
                buf.putInt(3)
                FfiConverterString.write(value.`description`, buf)
                Unit
            }
            is IrohException.Author -> {
                buf.putInt(4)
                FfiConverterString.write(value.`description`, buf)
                Unit
            }
            is IrohException.DocTicket -> {
                buf.putInt(5)
                FfiConverterString.write(value.`description`, buf)
                Unit
            }
            is IrohException.Uniffi -> {
                buf.putInt(6)
                FfiConverterString.write(value.`description`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




sealed class LiveEvent {
    object InsertLocal : LiveEvent()
    
    object InsertRemote : LiveEvent()
    
    object ContentReady : LiveEvent()
    
    

    
}

public object FfiConverterTypeLiveEvent : FfiConverterRustBuffer<LiveEvent>{
    override fun read(buf: ByteBuffer): LiveEvent {
        return when(buf.getInt()) {
            1 -> LiveEvent.InsertLocal
            2 -> LiveEvent.InsertRemote
            3 -> LiveEvent.ContentReady
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LiveEvent) = when(value) {
        is LiveEvent.InsertLocal -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is LiveEvent.InsertRemote -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is LiveEvent.ContentReady -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
    }

    override fun write(value: LiveEvent, buf: ByteBuffer) {
        when(value) {
            is LiveEvent.InsertLocal -> {
                buf.putInt(1)
                Unit
            }
            is LiveEvent.InsertRemote -> {
                buf.putInt(2)
                Unit
            }
            is LiveEvent.ContentReady -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class LogLevel {
    TRACE,DEBUG,INFO,WARN,ERROR,OFF;
}

public object FfiConverterTypeLogLevel: FfiConverterRustBuffer<LogLevel> {
    override fun read(buf: ByteBuffer) = try {
        LogLevel.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: LogLevel) = 4

    override fun write(value: LogLevel, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for SubscribeCallback Callback Interface

public interface SubscribeCallback {
    fun `event`(`event`: LiveEvent)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeSubscribeCallback : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeSubscribeCallback.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeSubscribeCallback.drop(handle)
                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeEvent`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeEvent`(kotlinCallbackInterface: SubscribeCallback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`event`(
                FfiConverterTypeLiveEvent.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: IrohException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeIrohError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeSubscribeCallback: FfiConverterCallbackInterface<SubscribeCallback>(
    foreignCallback = ForeignCallbackTypeSubscribeCallback()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.uniffi_iroh_fn_init_callback_subscribecallback(this.foreignCallback, status)
        }
    }
}




public object FfiConverterSequenceTypeEntry: FfiConverterRustBuffer<List<Entry>> {
    override fun read(buf: ByteBuffer): List<Entry> {
        val len = buf.getInt()
        return List<Entry>(len) {
            FfiConverterTypeEntry.read(buf)
        }
    }

    override fun allocationSize(value: List<Entry>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeEntry.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Entry>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeEntry.write(it, buf)
        }
    }
}



public object FfiConverterMapStringTypeCounterStats: FfiConverterRustBuffer<Map<String, CounterStats>> {
    override fun read(buf: ByteBuffer): Map<String, CounterStats> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, CounterStats> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterTypeCounterStats.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, CounterStats>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypeCounterStats.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, CounterStats>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeCounterStats.write(v, buf)
        }
    }
}

fun `setLogLevel`(`level`: LogLevel) =
    
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_iroh_fn_func_set_log_level(FfiConverterTypeLogLevel.lower(`level`),_status)
}



